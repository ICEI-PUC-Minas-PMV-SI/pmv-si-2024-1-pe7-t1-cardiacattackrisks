# -*- coding: utf-8 -*-
"""Naives Bayes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zv6FqyH_yW2wTWucSABkjA_bVcKqkFBP
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from IPython.display import display
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

# Carregar o conjunto de dados
data = pd.read_csv('heart_attack_prediction_dataset.csv')

# LIMPEZA E PREPARAÇÃO DOS DADOS

# Deletar coluna ID
data = data.drop(columns=['Patient ID'])

# Dados duplicados e nulos
print(f"Total de linhas duplicadas: {data.duplicated().sum()}")
print("---------------")
print(f"Total Valores Nulos        : {data.isnull().sum().sum()}")

# Edição da Pressão Sanguinea
data["Systolic Pressure"] = data["Blood Pressure"].apply(
    lambda x: x.split("/")[0]).astype(int)
data["Dyastolic Pressure"] = data["Blood Pressure"].apply(
    lambda x: x.split("/")[1]).astype(int)

# Deletar Blood Pressure
data = data.drop(columns=['Blood Pressure'])

# Deletar Continent, Hemisphere, Country
data = data.drop(columns=['Continent', 'Hemisphere', 'Country'])

# Redução de casas decimais para uma após a vírgula
pd.set_option('display.precision', 1)

# Transformando dados de 'Diet'
ordinal_map = {'Healthy': 2, 'Average': 1, 'Unhealthy': 0}
data['Diet'] = data['Diet'].map(ordinal_map)

# Transformando Male = 1 e Female = 0
ordinal_map_sex = {'Male': 1, 'Female': 0}
data['Sex'] = data['Sex'].map(ordinal_map_sex)

# ALGORITMO DE APRENDIZADO DE MÁQUINA

# Separar variáveis preditoras e variável a ser prevista
X = data.drop(columns=['Heart Attack Risk'])
y = data['Heart Attack Risk']

# Normalizar demais variáveis preditoras
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
# Aplicar SMOTE
smote = SMOTE(random_state=42)
X_res, y_res = smote.fit_resample(X_scaled, y)

# Dividir os dados em conjunto de treinamento e teste novamente
X_train_res, X_test_res, y_train_res, y_test_res = train_test_split(X_res, y_res, test_size=0.2, random_state=42)

# Treinar o modelo Naive Bayes com dados balanceados
naive_bayes_model_res = GaussianNB()
naive_bayes_model_res.fit(X_train_res, y_train_res)

# Fazer previsões
y_pred_res = naive_bayes_model_res.predict(X_test_res)

# Avaliar o modelo balanceado
print("Precisão:", accuracy_score(y_test_res, y_pred_res))
print("Matriz de confusão:\n", confusion_matrix(y_test_res, y_pred_res))
print("Classificação:\n", classification_report(y_test_res, y_pred_res))