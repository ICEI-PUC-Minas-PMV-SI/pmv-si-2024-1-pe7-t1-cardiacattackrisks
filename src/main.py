# -*- coding: utf-8 -*-
"""Heart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iMDSajz4y-ekOqaaOSKLkmqasQvuKAtN
"""

from google.colab import files
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import geopandas as gpd

files.upload()

pip install kaggle -q

!mkdir -p ~/.kaggle

!cp kaggle.json ~/.kaggle

!chmod 600 ~/.kaggle/kaggle.json

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/

!kaggle datasets download 'iamsouravbanerjee/heart-attack-prediction-dataset'

!unzip heart-attack-prediction-dataset.zip

data = pd.read_csv ('heart_attack_prediction_dataset.csv')
data

from google.colab import drive
drive.mount('/content/drive')

# Dewscrição de Média, Quartil, Mínimo, Máximo

data.iloc[:, ].describe()

# Tipos de dados do dataset
data.dtypes

# Correlações
data.iloc[:, ].corr(numeric_only=True)

# Mapa de Calor

plt.rcParams["figure.figsize"] = (20,10)
sns.heatmap(data.corr(),cmap='BrBG',annot=True)

#Gráfico de Porcentagemn Diabéticos
!pip install matplotlib

labels = data['Diabetes'].value_counts(sort=True).index
sizes = data['Diabetes'].value_counts(sort=True)
colors = ["lightblue", "green"]
explode = (0.05, 0)
plt.figure(figsize=(7, 7))
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90, )
plt.title('Porcentagem de pessoas com Diabetes no dataset')
plt.show()

#Gráfico Porcentagem Obesos

labels = data['Obesity'].value_counts(sort=True).index
sizes = data['Obesity'].value_counts(sort=True)
colors = ["lightblue", "green"]
explode = (0.05, 0)
plt.figure(figsize=(7, 7))
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90, )
plt.title('Porcentagem de pessoas Obesas no dataset')
plt.show()

#Gráfico Porcentagem Fumantes

labels = data['Smoking'].value_counts(sort=True).index
sizes = data['Smoking'].value_counts(sort=True)
colors = ["lightblue", "green"]
explode = (0.05, 0)
plt.figure(figsize=(7, 7))
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90, )
plt.title('Porcentagem de pessoas Fumantes no dataset')
plt.show()

#Gráfico Porcentagem Consumo de Álcool

labels = data['Alcohol Consumption'].value_counts(sort=True).index
sizes = data['Alcohol Consumption'].value_counts(sort=True)
colors = ["lightblue", "green"]
explode = (0.05, 0)
plt.figure(figsize=(7, 7))
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90, )
plt.title('Porcentagem de pessoas que consomem álcool no dataset')
plt.show()

#Gráfico Porcentagem Uso de Medicamentos

labels = data['Medication Use'].value_counts(sort=True).index
sizes = data['Medication Use'].value_counts(sort=True)
colors = ["lightblue", "green"]
explode = (0.05, 0)
plt.figure(figsize=(7, 7))
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90, )
plt.title('Porcentagem de pessoas que usam medicamentos no dataset')
plt.show()

#Gráfico Porcentagem Pessoa com problemnas cardiacos prévios

labels = data['Previous Heart Problems'].value_counts(sort=True).index
sizes = data['Previous Heart Problems'].value_counts(sort=True)
colors = ["lightblue", "green"]
explode = (0.05, 0)
plt.figure(figsize=(7, 7))
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90, )
plt.title('Porcentagem de pessoas com problemas cardíacos prévios no dataset')
plt.show()

#Dados Demográficos - Distribuição por sexo de risco cardíaco.

fig = plt.figure(figsize=(20, 8), facecolor='white')
gs = fig.add_gridspec(1, 2)
ax = [None for _ in range(2)]
ax[0] = fig.add_subplot(gs[0, 0])
ax[1] = fig.add_subplot(gs[0, 1])

ax[1].text(0.2, 3700, "Correlação de Sexo com Risco Cardíaco", fontsize=15, fontweight='bold')

palette1 = ["blue" for _ in range(2)]
palette1[1] = "gray"
palette2 = ["blue", "green"]

sns.countplot(data=data, x='Sex', ax=ax[1], hue='Heart Attack Risk', order= ['Male', 'Female'], zorder=2, palette=palette2)

for i in range(2):
    ax[i].grid(color='gray', linestyle=':', axis='y', zorder=0, dashes=(5, 10))
    ax[i].set_ylabel('')
    ax[i].set_xlabel('')

    for direction in ['top', 'right', 'left']:
        ax[i].spines[direction].set_visible(False)

plt.tight_layout()
plt.show()

#Dados Demográficos - Idade

plt.subplot(2, 2, 1)
sns.histplot(data=data, x='Age', bins=20, kde=True)
plt.title('Distribuiição por Idade')

#Dados Demográficos - Sexo

plt.subplot(2, 2, 1)
sns.histplot(data=data, x='Sex', bins=20, kde=True)
plt.title('Distribuiição por Sexo')

#Dados Demográficos - Número de Pessoas por País

country_count = data['Country'].value_counts()

# Plotting counts by Country
plt.figure(figsize=(10, 6))
sns.barplot(x=country_count.index, y=country_count.values, palette='viridis')
plt.title('Número de Pessoas por País')
plt.xlabel('Continent')
plt.ylabel('Number of Patients')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Dados Demográficos - Número de Pessoas por Continente

continent_count = data['Continent'].value_counts()


world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))


world = world.merge(
    pd.DataFrame(list(continent_count.items()), columns=['continent', 'count']),
    how='left', left_on='continent', right_on='continent'
)

fig, ax = plt.subplots(1, 1, figsize=(10, 6))
world.plot(column='count', ax=ax, legend=True,
           legend_kwds={'label': "Número de Pessoas por Continente", 'orientation': "horizontal"})
plt.show()

#Correlação -Idade e Colesterol

fig  = px.scatter(data, x = 'Age', y = 'Cholesterol', log_x = True, width = 800)
fig.update_traces(marker = dict(size = 12, line=dict(width = 2)), selector = dict(mode = 'markers'))
fig.update_layout(title = 'Colesterol X idade')
fig.update_xaxes(title = 'Idade')
fig.update_yaxes(title = 'Colesterol')
fig.show()

#Correlação - Colesterol e Horas Sedentárias

fig  = px.scatter(data, x = 'Cholesterol', y = 'Sedentary Hours Per Day', log_x = True, width = 800)
fig.update_traces(marker = dict(size = 12, line=dict(width = 2)), selector = dict(mode = 'markers'))
fig.update_layout(title = 'Colesterol X Horas Sedentárias por Dia')
fig.update_xaxes(title = 'Colesterol')
fig.update_yaxes(title = 'Horas Sedentárias por Dia')
fig.show()

#Correlação - IMC e Triglicerídios

fig  = px.scatter(data, x = 'BMI', y = 'Triglycerides', log_x = True, width = 800)
fig.update_traces(marker = dict(size = 12, line=dict(width = 2)), selector = dict(mode = 'markers'))
fig.update_layout(title = 'IMC X Triglicerídios')
fig.update_xaxes(title = 'IMC')
fig.update_yaxes(title = 'Triglicerídios')
fig.show()

#Correlação - Estresse e Frequência Cardíaca

fig  = px.scatter(data, x = 'Stress Level', y = 'Heart Rate', log_x = True, width = 800)
fig.update_traces(marker = dict(size = 12, line=dict(width = 2)), selector = dict(mode = 'markers'))
fig.update_layout(title = 'Estresse X Frequência Cardíaca')
fig.update_xaxes(title = 'Estresse')
fig.update_yaxes(title = 'Frequência Cardíaca')
fig.show()